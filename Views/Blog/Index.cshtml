@model List<noticias.Models.PostPlaceholder>
@{
    ViewData["Title"] = "Portal de Noticias";
}

<div class="container mt-4">
    <div class="text-center mb-4">
        <h2 class="text-muted"><em>"Profesor, favor de registrarse y logearse para poder dar like o dislike."</em></h2>
        <h1 class="display-4">@ViewData["Title"]</h1>
        <p class="lead">Explora las últimas noticias y comparte tu opinión.</p>
    </div>

    <div id="postsListContainer">
        @if (ViewBag.ErrorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @ViewBag.ErrorMessage
            </div>
        }
        else if (Model == null || !Model.Any())
        {
            <div class="col-12 text-center">
                <p>No hay noticias disponibles en este momento.</p>
            </div>
        }
        else
        {
            <div id="postsList" class="row">
                <div class="col-12 mb-3">
                    <h2 class="h3">Últimas Noticias</h2>
                </div>
                @foreach (var post in Model)
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card h-100 post-card-item" data-post-id="@post.Id" data-post-title="@post.Title" data-post-body="@post.Body" data-user-id="@post.UserId">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@post.Title</h5>
                                <p class="card-text flex-grow-1">
                                    @if (post.Body != null && post.Body.Length > 120)
                                    {
                                        @(post.Body.Substring(0, 120) + "...")
                                    }
                                    else
                                    {
                                        @post.Body
                                    }
                                </p>
                                <button class="btn btn-primary mt-auto align-self-start view-post-btn">Leer más</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <div id="postDetails" class="mt-5" style="display: none;">
        <button id="backToList" class="btn btn-outline-secondary mb-3">
            <i class="bi bi-arrow-left"></i> Volver a la lista
        </button>
        <div class="card">
            <div class="card-body">
                <h2 id="detailTitle" class="card-title"></h2>
                <p id="detailBody" class="card-text"></p>
                <hr>
                <div class="d-flex justify-content-start align-items-center mb-3">
                    <button class="btn btn-outline-success me-2 sentiment-btn" data-sentiment="like">
                        <i class="bi bi-hand-thumbs-up"></i> Like
                    </button>
                    <button class="btn btn-outline-danger me-3 sentiment-btn" data-sentiment="dislike">
                        <i class="bi bi-hand-thumbs-down"></i> Dislike
                    </button>
                    <span id="feedbackMessage" class="form-text"></span>
                </div>
                <h5 class="card-subtitle mb-2 text-muted">Autor: <span id="authorName"></span></h5>
            </div>
        </div>

        <div class="mt-4">
            <h3>Comentarios</h3>
            <ul id="commentsList" class="list-group list-group-flush">
                <li class="list-group-item">Cargando comentarios...</li>
            </ul>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/blog-styles.css" asp-append-version="true" />
}

@section Scripts {
    <script>
        const postDetailsDiv = document.getElementById('postDetails');
        const detailTitle = document.getElementById('detailTitle');
        const detailBody = document.getElementById('detailBody');
        const authorName = document.getElementById('authorName');
        const commentsList = document.getElementById('commentsList');
        const backToListButton = document.getElementById('backToList');
        const feedbackMessageSpan = document.getElementById('feedbackMessage');
        const postsListContainer = document.getElementById('postsListContainer');


        const jsonPlaceholderBaseUrl = 'https://jsonplaceholder.typicode.com'; 
        const localApiFeedbackUrl = '/api/feedback';

        let currentPostData = null;


        function initializePostClickEvents() {
            document.querySelectorAll('.post-card-item').forEach(cardElement => {
                cardElement.addEventListener('click', (e) => {
                    if (e.target.classList.contains('view-post-btn') || e.target.closest('.post-card-item')) {

                        const post = {
                            id: parseInt(cardElement.dataset.postId),
                            title: cardElement.dataset.postTitle,
                            body: cardElement.dataset.postBody, 
                            userId: parseInt(cardElement.dataset.userId)
                        };
                        handlePostClick(post);
                    }
                });
            });
        }


        async function handlePostClick(post) { 
            currentPostData = { id: post.id, title: post.title }; 
            postsListContainer.style.display = 'none';
            postDetailsDiv.style.display = 'block';
            feedbackMessageSpan.textContent = '';
            feedbackMessageSpan.className = 'form-text';
            detailTitle.textContent = post.title;
            detailBody.textContent = post.body; 

            authorName.textContent = 'Cargando...';
            commentsList.innerHTML = '<li class="list-group-item text-center"><div class="spinner-border spinner-border-sm" role="status"><span class="visually-hidden">Cargando...</span></div> Cargando comentarios...</li>';

            try {
                const authorResponse = await fetch(`${jsonPlaceholderBaseUrl}/users/${post.userId}`);
                if (!authorResponse.ok) throw new Error(`HTTP error! status: ${authorResponse.status} fetching author`);
                const author = await authorResponse.json();
                authorName.textContent = author.name;

                const commentsResponse = await fetch(`${jsonPlaceholderBaseUrl}/comments?postId=${post.id}`);
                if (!commentsResponse.ok) throw new Error(`HTTP error! status: ${commentsResponse.status} fetching comments`);
                const comments = await commentsResponse.json();

                commentsList.innerHTML = '';
                if (comments.length === 0) {
                    commentsList.innerHTML = '<li class="list-group-item">No hay comentarios para este post.</li>';
                } else {
                    comments.forEach(comment => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item';
                        li.innerHTML = `
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">${comment.name}</h6>
                                <small class="text-muted">${comment.email}</small>
                            </div>
                            <p class="mb-1">${comment.body}</p>
                        `;
                        commentsList.appendChild(li);
                    });
                }
            } catch (error) {
                console.error("Error fetching post details:", error);
                authorName.textContent = 'Error al cargar autor';
                commentsList.innerHTML = '<li class="list-group-item text-danger">Error al cargar comentarios.</li>';
                feedbackMessageSpan.textContent = 'Error al cargar detalles adicionales del post.';
                feedbackMessageSpan.className = 'form-text text-danger';
            }
        }

        async function recordFeedback(postId, postTitle, sentimiento) {
            feedbackMessageSpan.textContent = 'Guardando...';
            feedbackMessageSpan.className = 'form-text text-info';

            try {
                const payload = {
                    idPost: postId,
                    titulo: postTitle,
                    sentimiento: sentimiento
                };
                const response = await fetch(localApiFeedbackUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(payload)
                });

                if (response.status === 401) {
                    feedbackMessageSpan.textContent = 'Debes iniciar sesión para realizar esta acción.';
                    feedbackMessageSpan.className = 'form-text text-warning';
                    return;
                }

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error(`Error del servidor: ${response.status}. Respuesta: ${errorText}`);
                    feedbackMessageSpan.textContent = `Error al guardar ${sentimiento}. (${response.status})`;
                    feedbackMessageSpan.className = 'form-text text-danger';
                    return;
                }

                const result = await response.json();
                feedbackMessageSpan.textContent = `¡${sentimiento.charAt(0).toUpperCase() + sentimiento.slice(1)} guardado!`;
                feedbackMessageSpan.className = `form-text text-${sentimiento === 'like' ? 'success' : 'danger'}`;

            } catch (error) {
                console.error("Error en CATCH al enviar feedback a la API local:", error);
                feedbackMessageSpan.textContent = `Error al guardar ${sentimiento}.`;
                feedbackMessageSpan.className = 'form-text text-danger';
            }
        }

        backToListButton.addEventListener('click', () => {
            postDetailsDiv.style.display = 'none';
            postsListContainer.style.display = 'block';
            feedbackMessageSpan.textContent = '';
            feedbackMessageSpan.className = 'form-text';
            currentPostData = null;
        });

        document.querySelectorAll('.sentiment-btn').forEach(button => {
            button.addEventListener('click', function() {
                if (currentPostData && currentPostData.id && currentPostData.title) {
                    const sentiment = this.dataset.sentiment;
                    recordFeedback(currentPostData.id, currentPostData.title, sentiment);
                } else {
                    feedbackMessageSpan.textContent = "Error: No se pudo identificar el post. Intenta de nuevo.";
                    feedbackMessageSpan.className = 'form-text text-warning';
                }
            });
        });

        document.addEventListener('DOMContentLoaded', () => {
            initializePostClickEvents();
        });
    </script>
}